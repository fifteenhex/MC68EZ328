#!/usr/bin/kermit
#
# Do some on-time initializations
#
set prompt {Dragonix VZ> }

set line /dev/ttyS1
eight
set speed 19200
set flow none
set carrier-watch off
set input echo off
set quiet on

cls
echo  {*********************************************************************}
echo  {*         BBUG --- a bootstrap mode debugger for MC68VZ328          *}
echo  {*                             Ver 0.1                               *}
echo  {*                                                                   *}
echo  {* Copyright (C) 1999, Vladimir Gurevich                             *}
echo  {* Copyright (C) 2001, Daniel Haensse (modified for VZ328)           *}
echo  {*                                                                   *}
echo  {* BBUG is free software, covered by the GNU General Public License, *}
echo  {* and you are welcome to change it and/or distribute copies of it   *}
echo  {* under certain conditions.                                         *}
echo  {*                                                                   *}
echo  {* There is absolutely no warranty for BBUG.                         *}
echo  {*********************************************************************}
echo

#
# This macro is used to set Dragonix VZ board's serial port to 115200 bps
#
# Usage:
#         init
#
define init -
set speed 19200 ,-
set input echo on ,-
getc \%c {Please, reset the board and press <Enter>} ,-
output \13 ,-
input 1 @ ,-
echo {Connected to the board} ,-
output FFFFF9020100 ,-
input 1 FFFFF90201 ,-
echo {\13 38400 baud set.} ,-
set speed 38400 ,-
output FFFFF9030138 ,-
input 1 FFFFF90301 ,-
echo {\13 115200 baud set.} ,-
set speed 115200 ,-


#
# This macro is used to load a b-record file
#
# Usage:
#        load <b-record-file>
#
define load -
set xmit echo off ,-
set xmit linefeed on ,-
xmit \%1 ,-
echo {\7 **** Ready **** \7} ,-

#
# This macro is used to start a program from a specific address
#
# Usage:
#        start <hex-address>
#
define start -
assign \%a \Frawcommand({perl -e 'printf "%08X", 0x\%1'}) ,-
output \%a00 ,-
connect

#
# This macro is used to examine the memory on the board
#
# Usage:
#        mdisp <hex-address> <number-of-bytes>
#
# The algorithm is:
#	movel #<addr>, %a6
#	movel #UTX, %a5
#	moveb *%a6, *%a5
#
define mdisp -
assign \%l \%2 ,-
decr \%l ,-
for \%c 0 \%l 1 { ,-
	assign \%a \Frawcommand({perl -e 'printf "%08X", 0x\%1 + \%c'}) ,-
	assign \%m \Feval(\%c % 16) ,-
	if = \%m 0 xecho {\13\10\%a} ,-
	output FFFFFC00082C7C\%a4E71\13 ,-
	input 5 \13 ,-
	output FFFFFC0000 ,-
	output FFFFFC00082A7CFFFFF9074E71\13 ,-
	input 5 \13 ,-
	output FFFFFC0000 ,-
	output FFFFFC00081A964E714E714E71\13 ,-
	input 5 \13 ,-
	output FFFFFC0000 ,-
	input 5 FFFFFC0000 ,-
	input 5 ,-
	assign \%i \Fcode(\v(inchar)) ,-
	if NUMERIC \%i xecho { \13\10 \Fhexify(\v(inchar))\13\10} ,-
	else xecho { \13\10 00\13\10} ,-
} ,-
echo ,-
echo

#
# This macro is used to modify memory contents on the board
#
# Usage:
#        mmod <hex-address>
#
# The command will display the contents of the specified address.
# Enter
#        <hex-digit><hex-digit><Return> -- to enter new value
#        <Return>                       -- to go to the next location
#        .<Return>                      -- to quit
#
define mmod -
assign \%r n ,-
assign \%a  \Frawcommand({perl -e 'printf "%08X", 0x\%1'}) ,-
while ! EQUAL \%r \46 { ,-
	assign \%q \%a ,-
        output FFFFFC00082C7C\%a4E71\13 ,-
        input 5 \13 ,-
        output FFFFFC0000 ,-
        output FFFFFC00082A7CFFFFF9074E71\13 ,-
        input 5 \13 ,-
        output FFFFFC0000 ,-
        output FFFFFC00081A964E714E714E71\13 ,-
        input 5 \13 ,-
        output FFFFFC0000 ,-
        input 5 FFFFFC0000 ,-
        input 5 ,-
        assign \%i \Fcode(\v(inchar)) ,-
        if NUMERIC \%i assign \%q {\%q \Fhexify(\v(inchar))  } ,-
        else assign \%q {\%q 00  } ,-
	ask \%r \%q ,-
	assign \%l \Flength(\%r) ,-
	if = \%l 0 { ,-
	   assign \%a \Frawcommand({perl -e 'printf "%08X", 0x\%a + 1'}) ,-
	   assign \%r n ,-
	} , else if = \%l 2 { ,-
	   output \%a01\%r\13 ,-
	   input 5 \13 ,-
	} ,-
} ,-
echo

#
# This macro is used to start ppp to the board
#
define ppp -
redirect /usr/local/bin/pppd vag-ppp:board-ppp connect '/usr/sbin/chat -vf /home/vag/p' debug kdebug 1
